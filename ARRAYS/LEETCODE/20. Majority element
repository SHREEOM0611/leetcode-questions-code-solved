// Approach 1

// here we use map to store frequency of every element .
// if that max frequency is found then thats our number 
// else we return A[0] because thats the only case we will not find the element as for freq=1 it is not stored in map




    int majorityElement(vector<int>& nums) {
        map<int,int> res;
        int j,max=0;
        for(int i=0;i<nums.size();i++){
            if(res.find(nums[i])!=res.end()){
                res[nums[i]]++;
                
                if(res[nums[i]]>max){
                    max=res[nums[i]];
                    j=i;
                    
                }
                
            }else res[nums[i]]=1;
        }
        if(max>0)
            return nums[j];
        else return nums[0];
    }





// approach 2

 // here we sort the element and the the i th element is equal to i+size/2 th element or not. if it is the that's our number
 
 //this approach is very fast and takes very less space
 
 
    int majorityElement(vector<int>& nums) {
     int n=nums.size()/2;
        sort(nums.begin(),nums.end());
        for(int i=0;i<=n;i++){
            if(nums[i]==nums[i+n]){
                return nums[i];
            }
        }
        return 0;
    }
