// using tortoise and hare logic

int findDuplicate(vector<int>& nums) {
     if(nums.size()>1){
         int slow=nums[0];
         int fast=nums[0];
    
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
            
        }while(slow!=fast);
        
        fast=nums[0];
        while(fast!=slow){
            fast=nums[fast];
            slow=nums[slow];
        }
        return slow;
    }
    return -1;
    }
    
    
    // using sort function
        int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return nums[i];
            }
        }
        return -1;
    }   

// using unordered set
      int findDuplicate(vector<int>& nums) {
       unordered_set<int>numbers;
       for(auto &num= nums){
       if(numbers.count(num))
           return num;
       else numbers.insert(num);        
    }
    return -1;
    }
